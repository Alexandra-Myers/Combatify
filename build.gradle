plugins {
	id 'fabric-loom' version '1.11-SNAPSHOT'
	id 'maven-publish'
}

version = "$project.mod_version.$project.sub_version"
group = project.maven_group

base {
	archivesName = "$project.archives_base_name-$project.minecraft_version-Fabric"
}

configurations {
	includeClasspath
}

loom {
	accessWidenerPath = file("src/main/resources/combatify.accesswidener")
}

repositories {
	flatDir {
		dirs 'libs'
	}
	allprojects { repositories { maven { url 'https://jitpack.io' } } }
	maven { url "https://maven.shedaniel.me/" }
	maven { url "https://maven.terraformersmc.com/releases/" }

	maven {
		name = "Modrinth"
		url = "https://api.modrinth.com/maven"
	}

	maven {
		name = "auoeke Maven"
		url = uri("https://maven.auoeke.net")
	}

	maven {
		name = "ENDERZOMBI102 Maven"
		url = uri("https://repsy.io/mvn/enderzombi102/mc")
	}
	maven { url 'https://maven.wispforest.io' }
	maven {
		url "https://maven.jamieswhiteshirt.com/libs-release"
		content {
			includeGroup "com.jamieswhiteshirt"
		}
	}
}

// All the dependencies are declared at gradle/libs.version.toml and referenced with "libs.<id>"
// See https://docs.gradle.org/current/userguide/platforms.html for information on how version catalogs work.
dependencies {
	minecraft "com.mojang:minecraft:${project.minecraft_version}"
	mappings loom.officialMojangMappings()
	modImplementation "net.fabricmc:fabric-loader:${project.loader_version}"
	modImplementation "net.fabricmc.fabric-api:fabric-api:${project.fabric_version}"
	modApi "me.shedaniel.cloth:cloth-config-fabric:11.0.99"
	modCompileOnly("com.github.rizecookey:CookeyMod:1.7.1+1.20.1")
	modApi("com.terraformersmc:modmenu:7.1.0")
	annotationProcessor(modImplementation("io.wispforest:owo-lib:${project.owo_version}"))
	modCompileOnly("com.jamieswhiteshirt:reach-entity-attributes:2.4.0")

	// include this if you don't want force your users to install owo
	// sentinel will warn them and give the option to download it automatically
	include("io.wispforest:owo-sentinel:${project.owo_version}")
}

configurations.all {
	resolutionStrategy {
		force("net.fabricmc:fabric-loader:${project.loader_version}")
	}
}

loom {
	accessWidenerPath = file("src/main/resources/combatify.accesswidener")
}

processResources {
	inputs.property "version", project.version

	filesMatching("fabric.mod.json") {
		expand "version": project.version
	}
}

tasks.withType(JavaCompile).configureEach {
	it.options.encoding = "UTF-8"
	// Minecraft 1.18 (1.18-pre2) upwards uses Java 17.
	it.options.release = 17
}

java {
	// Still required by IDEs such as Eclipse and Visual Studio Code
	sourceCompatibility = JavaVersion.VERSION_17
	targetCompatibility = JavaVersion.VERSION_17

	// Loom will automatically attach sourcesJar to a RemapSourcesJar task and to the "build" task if it is present.
	// If you remove this line, sources will not be generated.
	withSourcesJar()

	// If this mod is going to be a library, then it should also generate Javadocs in order to aid with developement.
	// Uncomment this line to generate them.
	// withJavadocJar()
}

// If you plan to use a different file for the license, don't forget to change the file name here!
jar {
	from("LICENSE") {
		rename { "${it}_${project.base.archivesName.get()}" }
	}
	from {
		configurations.includeClasspath.collect { it.isDirectory() ? it : zipTree(it) }
	}
}

// Configure the maven publication
publishing {
	publications {
		mavenJava(MavenPublication) {
			from components.java
		}
	}

	// See https://docs.gradle.org/current/userguide/publishing_maven.html for information on how to set up publishing.
	repositories {
		// Add repositories to publish to here.
		// Notice: This block does NOT have the same function as the block in the top level.
		// The repositories here will be used for publishing your artifact, not for
		// retrieving dependencies.
	}
}
