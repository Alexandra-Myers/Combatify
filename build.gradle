plugins {
	id "dev.architectury.loom" version "1.11-SNAPSHOT"
	id "maven-publish"
}

version = "$project.mod_version.$project.sub_version"
group = project.maven_group

base {
	archivesName = "$project.archives_base_name-$project.minecraft_version-Forge"
}

configurations {
	includeClasspath
}

loom {
	// use this if you are using the official mojang mappings
	// and want loom to stop warning you about their license
	silentMojangMappingsLicense()
	accessWidenerPath = file("src/main/resources/combatify.accesswidener")

	// since loom 0.10, you are **required** to use the
	// "forge" block to configure forge-specific features,
	// such as the mixinConfigs array or datagen
	forge {
		// specify the mixin configs used in this mod
		// this will be added to the jar manifest as well!
		mixinConfigs = [
			"combatify.mixins.json"
		]

		// missing access transformers?
		// don't worry, you can still use them!
		// note that your AT *MUST* be located at
		// src/main/resources/META-INF/accesstransformer.cfg
		// to work as there is currently no config option to change this.
		// also, any names used in your access transformer will need to be
		// in SRG mapped ("func_" / "field_" with MCP class names) to work!
		// (both of these things may be subject to change in the future)
	}
}

repositories {
	// Put repositories for dependencies here
	mavenCentral()
	maven {
		name = 'NeoForged'
		url = 'https://maven.neoforged.net/releases'
	}

	// If you have mod jar dependencies in ./libs, you can declare them as a repository like so.
	// See https://docs.gradle.org/current/userguide/declaring_repositories.html#sub:flat_dir_resolver
	flatDir {
		dir 'libs'
	}
	maven {
		url "https://maven.su5ed.dev/releases"
	}
	maven { url "https://maven.shedaniel.me/" }
	maven {
		url "https://api.modrinth.com/maven"
	}
}

dependencies {
	// to change the versions see the gradle.properties file
	minecraft "com.mojang:minecraft:${project.minecraft_version}"

	// choose what mappings you want to use here
	// leave this uncommented if you want to use
	// mojang's official mappings, or feel free
	// to add your own mappings here (how about
	// mojmap layered with parchment, for example?)
	mappings loom.officialMojangMappings()

	// uncomment this if you want to use yarn mappings
	// mappings "net.fabricmc:yarn:${project.yarn_mappings}:v2"

	// your forge dependency, this is **required** when using Forge Loom in forge mode!
	forge "net.minecraftforge:forge:${minecraft_version}-${neo_version}"
	implementation(annotationProcessor("io.github.llamalad7:mixinextras-common:0.5.0"))
	implementation(include("io.github.llamalad7:mixinextras-forge:0.5.0"))
	modImplementation "maven.modrinth:midnightlib:${project.midnightlib_version}"

	// additional dependencies can be specified using loom's regular format
	// specifying a "mod" dependency (like modImplementation or modApi)
	// will cause loom to remap the file to your specified mappings

	// in this example, we'll be adding JEI as a dependency
	// according to their developer example on GitHub
	// see: https://github.com/mezz/JustEnoughItems/wiki/Getting-Started
	// compile against the JEI API but do not include it at runtime
	// don't worry about loom "not finding a forge mod" here,
	// JEI's api just doesn't have any class with an @Mod annotation
	// modCompileOnly "mezz.jei:jei-@MINECRAFT@:${jei_version}:api"
	// at runtime, use the full JEI jar
	// modRuntimeOnly "mezz.jei:jei-@MINECRAFT@:${jei_version}"
}

processResources {
	var replaceProperties = [
		minecraft_version   : minecraft_version, minecraft_version_range: minecraft_version_range,
		neo_version         : neo_version, neo_version_range: neo_version_range,
		loader_version_range: loader_version_range,
		mod_id              : mod_id, mod_name: mod_name, mod_license: mod_license, mod_version: mod_version,
		mod_authors         : mod_authors, mod_description: mod_description, pack_format_number: pack_format_number,
	]
	inputs.properties replaceProperties

	filesMatching(['META-INF/mods.toml', 'pack.mcmeta']) {
		expand replaceProperties + [project: project]
	}
}

tasks.withType(JavaCompile) {
	// ensure that the encoding is set to UTF-8, no matter what the system default is
	// this fixes some edge cases with special characters not displaying correctly
	// see http://yodaconditions.net/blog/fix-for-java-file-encoding-problems-with-gradle.html
	// If Javadoc is generated, this must be specified in that task too.
	options.encoding = "UTF-8"
	options.release = 17
}

java {
	// Still required by IDEs such as Eclipse and Visual Studio Code
	sourceCompatibility = JavaVersion.VERSION_17
	targetCompatibility = JavaVersion.VERSION_17

	// Loom will automatically attach sourcesJar to a RemapSourcesJar task and to the "build" task if it is present.
	// If you remove this line, sources will not be generated.
	withSourcesJar()

	// If this mod is going to be a library, then it should also generate Javadocs in order to aid with developement.
	// Uncomment this line to generate them.
	// withJavadocJar()
}

remapJar {
	atAccessWideners.add('combatify.accesswidener')
}

// If you plan to use a different file for the license, don't forget to change the file name here!
jar {
	from("LICENSE") {
		rename { "${it}_${project.base.archivesName.get()}" }
	}
	from {
		configurations.includeClasspath.collect { it.isDirectory() ? it : zipTree(it) }
	}
	// add some additional metadata to the jar manifest
	manifest {
		attributes([
			"Specification-Title"     : project.mod_id,
			"Specification-Vendor"    : "Atlas Dev",
			"Specification-Version"   : "1",
			"Implementation-Title"    : "Combatify",
			"Implementation-Version"  : version,
			"Implementation-Vendor"   : "Atlas Dev",
			"Implementation-Timestamp": new Date().format("yyyy-MM-dd'T'HH:mm:ssZ")
		])
	}
}

// configure the maven publication
publishing {
	publications {
		mavenJava(MavenPublication) {
			from components.java
		}
	}

	// See https://docs.gradle.org/current/userguide/publishing_maven.html for information on how to set up publishing.
	repositories {
		// Add repositories to publish to here.
		// Notice: This block does NOT have the same function as the block in the top level.
		// The repositories here will be used for publishing your artifact, not for
		// retrieving dependencies.
	}
}
