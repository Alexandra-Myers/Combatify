plugins {
	id 'dev.architectury.loom' version '1.11-SNAPSHOT'
	id 'maven-publish'
}

version = "$project.mod_version.$project.sub_version"
group = project.maven_group

base {
	archivesName = "$project.archives_base_name-$project.minecraft_version-NeoForge"
}
configurations {
	includeClasspath
}

repositories {
	// Add NeoForged repository.
	maven {
		name = 'NeoForged'
		url = 'https://maven.neoforged.net/releases'
	}
	maven {
		url "https://maven.su5ed.dev/releases"
	}

	// Add repositories to retrieve artifacts from in here.
	// You should only use this when depending on other mods because
	// Loom adds the essential maven repositories to download Minecraft and libraries from automatically.
	// See https://docs.gradle.org/current/userguide/declaring_repositories.html
	// for more information about repositories.
	flatDir {
		dirs 'libs'
	}
	allprojects { repositories { maven { url 'https://jitpack.io' } } }
	maven { url "https://maven.shedaniel.me/" }
	exclusiveContent {
		forRepository {
			maven {
				name = "Modrinth"
				url = "https://api.modrinth.com/maven"
			}
		}
		filter {
			includeGroup "maven.modrinth"
		}
	}
	maven { url "https://maven.terraformersmc.com/releases/" }
	mavenCentral()
	maven {
		name = "ViaVersion"
		url = "https://repo.viaversion.com"
	}
	maven {
		name = "Lenni0451"
		url = "https://maven.lenni0451.net/everything"
	}
	maven {
		name = "OpenCollab Snapshots"
		url = "https://repo.opencollab.dev/maven-snapshots/"
	}
	maven { url "https://maven.ryanliptak.com/" }
}

loom {
	silentMojangMappingsLicense()
	accessWidenerPath = file("src/main/resources/combatify.accesswidener")
}

dependencies {
	minecraft "net.minecraft:minecraft:$project.minecraft_version"
	mappings loom.officialMojangMappings()
	neoForge "net.neoforged:neoforge:$project.neoforge_version"
	modImplementation "org.sinytra.forgified-fabric-api:forgified-fabric-api:${project.fabric_version}"
	modCompileOnly "maven.modrinth:sodium:${project.sodium_version}"
	modImplementation "maven.modrinth:atlas-core:${project.atlas_core_version}"
	modImplementation "maven.modrinth:defaulted:${project.defaulted_version}"
	modCompileOnly("de.florianmichael:ViaFabricPlus:${project.viafabricplus_version}") {
		exclude(group: "net.fabricmc.fabric-api")
	}
	modApi "me.shedaniel.cloth:cloth-config-neoforge:${project.cloth_config_version}"
	modCompileOnly("maven.modrinth:cookeymod:${project.cookeymod_version}") {
		exclude(group: "net.fabricmc.fabric-api")
	}
	modCompileOnly("local.xyz.nucleoid:packet-tweaker:${project.packet_tweaker_version}") {
		exclude(group: "net.fabricmc.fabric-api")
	}
	modCompileOnly("local.eu.pb4:polymer-common:${project.polymer_version}") {
		exclude(group: "net.fabricmc.fabric-api")
	}
	modCompileOnly("local.eu.pb4:polymer-core:${project.polymer_version}") {
		exclude(group: "net.fabricmc.fabric-api")
	}
	modCompileOnly("local.eu.pb4:polymer-reg-sync-manipulator:${project.polymer_version}") {
		exclude(group: "net.fabricmc.fabric-api")
	}
	modImplementation "squeek.appleskin:appleskin-neoforge:${project.appleskin_version}"
	include(implementation("org.mozilla:rhino-all:${project.rhino_version}"))
	forgeRuntimeLibrary("org.mozilla:rhino:${project.rhino_version}")
	forgeRuntimeLibrary("org.mozilla:rhino-tools:${project.rhino_version}")
	forgeRuntimeLibrary("org.mozilla:rhino-xml:${project.rhino_version}")

	implementation "com.moandjiezana.toml:toml4j:${project.toml4j_version}"
	includeClasspath("com.moandjiezana.toml:toml4j:${project.toml4j_version}") {
		exclude(group: "com.google.code.gson")
	}
}

processResources {
	exclude "architectury.common.json"
	inputs.property 'version', project.mod_version

	filesMatching('META-INF/neoforge.mods.toml') {
		expand version: inputs.properties.version
	}
}

remapJar {
	atAccessWideners.add('combatify.accesswidener')
}

java {
	// Loom will automatically attach sourcesJar to a RemapSourcesJar task and to the "build" task
	// if it is present.
	// If you remove this line, sources will not be generated.
	withSourcesJar()

	sourceCompatibility = JavaVersion.VERSION_21
	targetCompatibility = JavaVersion.VERSION_21
}

tasks.withType(JavaCompile).configureEach {
	it.options.release = 21
}

// Configure Maven publishing.
publishing {
	publications {
		mavenJava(MavenPublication) {
			from components.java
		}
	}

	// See https://docs.gradle.org/current/userguide/publishing_maven.html for information on how to set up publishing.
	repositories {
		// Add repositories to publish to here.
		// Notice: This block does NOT have the same function as the block in the top level.
		// The repositories here will be used for publishing your artifact, not for
		// retrieving dependencies.
	}
}
